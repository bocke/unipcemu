;
; File: modemconnect.scp
;
; Description: Dial-Up Networking connect script for use with PPP
;              running on UniPCemu internet server.
;
; Author: Superfury (Superfury1 at vogons.org)
;
; Date: 2017/04/28: - first version released
; Date: 2020/01/11: - Added the PPP protocol instead of the SLIP protocol.
; Date: 2021/05/19: - Improved starting state waiting for login prompt
;
; Items worthy of noting:
;
; 1. I don't use any flavour of Microsoft Windows. Although I'm willing to
;    help people when I can, the help I can offer is really quite limited.
;    Please don't ask me for help which doesn't pertain to using this
;    script.
;
;    While I'm on the subject, I don't use SLiRP either. I used it some
;    time ago and was able to develop this script then.
;
; 2. I provide this script AS-IS. I make no claims as to its suitability
;    for any purpose, not even the one it's intended for. There are no
;    warranties, either expressed or implied.
;
; 3. This script is freely available to all who wish to use it. There
;    are no restrictions on its use or distribution. If you copy this
;    script, or portions of it, please copy these notes as well, and
;    please leave it bundled with the README.TXT file.
;
; 4. Read the file README.TXT. That's exactly why it's called that. There
;    may not be anything in there you need to know, but then again, there
;    just might be. It's short enough that it shouldn't be a bother to
;    read.
;
; 5. If you *do* need help, please try and provide as much information as
;    possible. Remember I don't use Windows, so if you want me to help,
;    you need to let me see exactly what you see.
;

proc main

   ; First we set up some variables, starting with the prompts we will
   ; wait for. Note that the 'waitfor' command is case insensitive,
   ; meaning we don't need to worry here about case. If you wish any of
   ; these to be case-sensitive, then add a ', matchcase' clause at the
   ; appropriate 'waitfor' instruction, as in
   ; 'waitfor login_prompt, matchcase then ...'.
   ;
   ;
   ; Note that the menu_prompt is simply an arbitrary string near the
   ; end of the main menu in menushell. By the time this script sees
   ; that string, the menu will actually have been drawn, (though a few
   ; characters may still be in transit in the modems). The string is
   ; unique enough that we'll only pick it up when the menu is ready to
   ; accept a command.

   string username_prompt    = "sername:"        ; username prompt
   string password_prompt    = "assword:"      ; password prompt
   string protocol_prompt    = "rotocol:"      ; protocol prompt

   ; these are the informational messages printed by SLIP server. Might be possible to autoconfigure?
   string ipaddress_message = "IPaddress:"
   string macaddress_message = "MACaddress:"
   string gatewayipaddress_message = "gatewayIPaddress:"
   string gatewaymacaddress_message = "gatewayMACaddress:"
   string ready_message   = "<cr>CONNECTED<cr>"

   ; A flag to tell if we're done.
   boolean sliping       = FALSE

   ; note the coding style here is nothing to be proud of, but it keeps
   ; things fairly simple, while still being able to handle multiple
   ; circumstances. We'll loop around waiting for various prompts, and
   ; deal with each appropriately. In each case, we'll go back to the
   ; loop, which will exit once we determine that we have the slirp
   ; connection established.
goto start

do_username:
    transmit $USERID
    transmit "<cr>"
    goto resume

do_password:
    ; Note here that we transmit the password with the 'raw' modifier,
    ; to make sure that special characters such as '^' and '\' are not
    ; translated by Dial-Up Networking to represent "special" control
    ; characters.
    transmit $PASSWORD, raw
    transmit "<cr>"
    goto resume

do_protocol:
    transmit "ppp" + "<cr>"
    goto resume

do_ipaddress:

    ; Get the IP address assigned to us by SLIP
    if $SUCCESS then
        set ipaddr getip
    endif
    goto resume

do_macaddress:

    ; Get the MAC address assigned to us by SLIP
    if $SUCCESS then
        ;set ipaddr getip
    endif
    goto resume

do_gatewayipaddress:

    ; Get the gateway IP address assigned to us by SLIP
    if $SUCCESS then
        ;set ipaddr getip
    endif
    goto resume

do_gatewaymacaddress:

    ; Get the gateway MAC address assigned to us by SLIP
    if $SUCCESS then
        ;set ipaddr getip
    endif
    goto resume

do_ready:
    sliping = TRUE

    ; Note that we fall through to our main loop here,
    ; which will exit if we are successful.
    goto resume

start:
   waitfor username_prompt then do_username until 10
   if !$SUCCESS then
   goto do_username
   endif
   ; Enter the main loop!
resume:
   while !sliping do
       waitfor username_prompt then do_username,
               password_prompt then do_password,
               protocol_prompt then do_protocol,
               ipaddress_message then do_ipaddress,
               macaddress_message then do_macaddress,
               gatewayipaddress_message then do_gatewayipaddress,
               gatewaymacaddress_message then do_gatewaymacaddress,
               ready_message then do_ready
       until 90
   endwhile
endproc
