#Windows makefile test project settings

BUILD_DIR = ../../projects_build/$(BUILD_NAME)

#Name of the destination application!
TARGET = $(BUILD_NAME).exe

TARGET_PROFILE_TXT = profiler.txt
TARGET_PROFILE_CMP_TXT = profiler2.txt

#Currently, our resource is only one: The project rc file!
RESOURCES = $(BUILD_NAME).res

#GProf switches!
GPROF_SWITCHES =

# ###################################################


#Our actual building script doing all the hard work:

#Our filenames of the targets (release and debug)!
TARGET_RELEASE = $(TARGET)
TARGET_DEBUG = dbg$(TARGET)
TARGET_PROFILE = prof$(TARGET)

#Programs
ifeq (,$(CC))
CC := $(CROSS_COMPILE)gcc
endif
ifeq (,$(WINDRES))
WINDRES := $(CROSS_COMPILE)windres
endif
ifeq (,$(AR))
AR := $(CROSS_COMPILE)ar
endif
ifeq (,$(STRIP))
STRIP := $(CROSS_COMPILE)strip
endif
ifeq (,$(RM))
RM = rm -f
endif

WARNS = -Wall

ifeq (,$(findstring x64,$(MAKECMDGOALS)))
#x86 version
ifneq (,$(findstring SDL2,$(MAKECMDGOALS)))
#SDL2 functions instead!
INCLUDE_DIRS := -I. -I$(prefix)/include -I$(prefix)/include/SDL2 -I$(prefix)/lib
endif

ifeq (,$(findstring SDL2,$(MAKECMDGOALS)))
#SDL1 functions instead!
INCLUDE_DIRS := -I. -I$(prefix)/include -I$(prefix)/include/SDL -I(prefix)/lib
endif
endif

ifneq (,$(findstring x64,$(MAKECMDGOALS)))
#x64 version
ifneq (,$(findstring SDL2,$(MAKECMDGOALS)))
#SDL2 functions instead!
INCLUDE_DIRS := -I. -I$(prefix)/include -I$(prefix)/include/SDL2 -I$(prefix)/lib
endif

ifeq (,$(findstring SDL2,$(MAKECMDGOALS)))
#SDL1 functions instead!
INCLUDE_DIRS := -I. -I$(prefix)/include -I$(prefix)/include/SDL -I$(prefix)/lib
endif

#Modify the compiler to 64-bit!
CC = x86_64-w64-mingw32-gcc
endif

#Default optimization flags!
OPTIMIZATIONFLAGS = -O3

#Execute stripping if set below!
STRIP = -s

#Building for debugging optimization flags
ifneq (,$(findstring debug,$(MAKECMDGOALS)))
OPTIMIZATIONFLAGS = -Og
endif

#Building for debugger and normal CFLAGS
BUILD_CFLAGS = -enable-core-inline -static-libgcc -static-libstdc++
ifneq (,$(findstring debug,$(MAKECMDGOALS)))
BUILD_CFLAGS = -ggdb -ffunction-sections
endif

ifneq (,$(findstring profile,$(MAKECMDGOALS)))
BUILD_CFLAGS = -g -pg -ffunction-sections -enable-core-inline -static-libgcc -static-libstdc++
endif

#Different kinds of flags!
#Add -mno-ms-bitfields to fix broken bitfields and type sizes in MinGW.
CFLAGS = -std=c99 ${WARNS} -mno-ms-bitfields

ifneq (,$(findstring SDL2,$(MAKECMDGOALS)))
#SDL2 functions&libs instead! Link statically?
ifneq (,$(findstring SDL2static,$(MAKECMDGOALS)))
LDFLAGS = -static -lmingw32 -lSDL2main -lSDL2 -lm -ldinput8 -ldxguid -ldxerr8 -luser32 -lgdi32 -lwinmm -limm32 -lole32 -loleaut32 -lshell32 -lversion -luuid -static-libgcc
endif
ifeq (,$(findstring SDL2static,$(MAKECMDGOALS)))
#Link dynamically?
LDFLAGS = -lmingw32 -lSDL2main -lSDL2
endif
#Flags always set for compiling with SDL2(for the code compilation itself)!
CFLAGS := $(CFLAGS) -DSDL2
endif

ifeq (,$(findstring SDL2,$(MAKECMDGOALS)))
#SDL1 functions instead!
LDFLAGS = -lmingw32 -lSDLmain -lSDL
endif

#Apply build directory etc.
BUILD_RELEASE = $(BUILD_DIR)/$(TARGET_RELEASE)
BUILD_DEBUG = $(BUILD_DIR)/$(TARGET_DEBUG)
BUILD_PROFILE = $(BUILD_DIR)/$(TARGET_PROFILE)
BUILD_PROFILE_GMON = $(BUILD_DIR)/gmon.out
BUILD_PROFILE_GMON_TXT = $(BUILD_DIR)/$(TARGET_PROFILE_TXT)
BUILD_PROFILE_GMON_CMP_TXT = $(BUILD_DIR)/$(TARGET_PROFILE_CMP_TXT)
BUILD_RESOURCES := $(patsubst %.res,$(BUILD_DIR)/%.res,$(RESOURCES))

OBJS := $(patsubst %.o,$(BUILD_DIR)/%.o,$(OBJS))

#Rules themselves!
#Build,debug and analyze(profile subcommand) command support!

analyze: profile
	gprof $(GPROF_SWITCHES) $(BUILD_PROFILE) $(BUILD_PROFILE_GMON) > $(BUILD_PROFILE_GMON_TXT)

analyze2: profile
	gprof $(GPROF_SWITCHES) $(BUILD_PROFILE) $(BUILD_PROFILE_GMON) > $(BUILD_PROFILE_GMON_CMP_TXT)

build: $(BUILD_RELEASE)
profile: $(BUILD_PROFILE)
reprofile: clean profile

#Run debugger now on the executable!
debug: $(BUILD_DEBUG)
	gdb -w --cd="$(BUILD_DIR)" --se="$(TARGET_DEBUG)"

redebug: clean debug

#Compile into debug mode without stripping (-s)!
$(BUILD_DEBUG): ${OBJS}
	${CC} -ggdb -o "$@" $(OBJS) -Wl,-gc-sections ${LDFLAGS}

$(BUILD_PROFILE): ${OBJS}
	${CC} -g -pg -o "$@" $(OBJS) -Wl,-gc-sections ${LDFLAGS}

#Compile into release mode with stripping (-s)!
$(BUILD_RELEASE): ${OBJS} $(BUILD_RESOURCES)
	${CC} -o "$@" ${OBJS} $(BUILD_RESOURCES) $(STRIP) ${LDFLAGS}

#Normal compilation of seperate modules!
$(BUILD_DIR)/%.res:%.rc
	${WINDRES} $< -O coff -o $@

$(BUILD_DIR)/%.o:%.c
	${CC} $(OPTIMIZATIONFLAGS) ${CFLAGS} $(BUILD_CFLAGS) ${INCLUDE_DIRS} -c $< -o $@

clean:
	-$(RM) $(OBJS)
	-$(RM) $(BUILD_RESOURCES)
	-$(RM) $(BUILD_RELEASE)
	-$(RM) $(BUILD_PROFILE)
	-$(RM) $(BUILD_DEBUG)

# Special flags that aren't targets!
.PHONY: SDL2 SDL2static