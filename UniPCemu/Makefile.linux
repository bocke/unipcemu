#Linux makefile test project settings

BUILD_DIR = ../../projects_build/$(BUILD_NAME)

#Name of the destination application!
TARGET = $(BUILD_NAME)

TARGET_PROFILE_TXT = profiler.txt
TARGET_PROFILE_CMP_TXT = profiler2.txt

#GProf switches!
GPROF_SWITCHES =

# ###################################################


#Our actual building script doing all the hard work:

#Our filenames of the targets (release and debug)!
TARGET_RELEASE = $(TARGET)
TARGET_DEBUG = dbg$(TARGET)
TARGET_PROFILE = prof$(TARGET)

#Programs
CC = $(CROSS_COMPILE)gcc
RM = rm -f
ifeq (,$(MKDIR))
MKDIR = mkdir
endif

WARNS = -Wall

ifneq (,$(findstring SDL2,$(MAKECMDGOALS)))
#SDL2 functions instead!
INCLUDE_DIRS := -I. $(shell sdl2-config --cflags)
endif

ifeq (,$(findstring SDL2,$(MAKECMDGOALS)))
#SDL1 functions instead!
INCLUDE_DIRS := -I. $(shell sdl-config --cflags)
endif


#Default optimization flags!
OPTIMIZATIONFLAGS = -O3

#Execute stripping if set below!
STRIP = -s

#Building for debugging optimization flags
ifneq (,$(findstring debug,$(MAKECMDGOALS)))
OPTIMIZATIONFLAGS = -Og
endif

CFLAGS := $(CFLAGS) -D$(BUILD_DEFINE)

#Building for debugger and normal CFLAGS
BUILD_CFLAGS = -enable-core-inline -static-libgcc -static-libstdc++
ifneq (,$(findstring debug,$(MAKECMDGOALS)))
BUILD_CFLAGS = -ggdb -ffunction-sections
endif

ifneq (,$(findstring profile,$(MAKECMDGOALS)))
BUILD_CFLAGS = -g -pg -ffunction-sections -enable-core-inline -static-libgcc -static-libstdc++
endif

#Different kinds of flags!
#Add -mno-ms-bitfields to fix broken bitfields and type sizes in MinGW.
CFLAGS = -std=c99 ${WARNS} -mno-ms-bitfields

ifneq (,$(findstring SDL2,$(MAKECMDGOALS)))
#SDL2 functions&libs instead! Link statically?
ifneq (,$(findstring SDL2static,$(MAKECMDGOALS)))
LDFLAGS = -static -lSDL2 -lm -ldinput8 -ldxguid -ldxerr8 -static-libgcc
endif
ifeq (,$(findstring SDL2static,$(MAKECMDGOALS)))
#Link dynamically?
LDFLAGS = -lSDL2
endif
#Flags always set for compiling with SDL2(for the code compilation itself)!
CFLAGS := $(CFLAGS) -DSDL2
endif

ifeq (,$(findstring SDL2,$(MAKECMDGOALS)))
#SDL1 functions instead!
LDFLAGS = -lSDL
endif

#Apply build directory etc.
BUILD_RELEASE = $(BUILD_DIR)/$(TARGET_RELEASE)
BUILD_DEBUG = $(BUILD_DIR)/$(TARGET_DEBUG)
BUILD_PROFILE = $(BUILD_DIR)/$(TARGET_PROFILE)
BUILD_PROFILE_GMON = $(BUILD_DIR)/gmon.out
BUILD_PROFILE_GMON_TXT = $(BUILD_DIR)/$(TARGET_PROFILE_TXT)
BUILD_PROFILE_GMON_CMP_TXT = $(BUILD_DIR)/$(TARGET_PROFILE_CMP_TXT)

#Make sure the objects to compile are sorted!
OBJS := $(sort $(OBJS))

OBJS := $(patsubst %.o,$(BUILD_DIR)/linux/%.o,$(OBJS))

#Rules themselves!
#Build,debug and analyze(profile subcommand) command support!

analyze: profile
	$(info Creating $(TARGET_PROFILE_TXT)...)
	@gprof $(GPROF_SWITCHES) $(BUILD_PROFILE) $(BUILD_PROFILE_GMON) > $(BUILD_PROFILE_GMON_TXT)

analyze2: profile
	$(info Creating $(TARGET_PROFILE_CMP_TXT)...)
	@gprof $(GPROF_SWITCHES) $(BUILD_PROFILE) $(BUILD_PROFILE_GMON) > $(BUILD_PROFILE_GMON_CMP_TXT)

build: $(BUILD_RELEASE)
profile: $(BUILD_PROFILE)
reprofile: clean profile

#Run debugger now on the executable!
debug: $(BUILD_DEBUG)
	$(info Starting gdb...)
	gdb -w --cd="$(BUILD_DIR)" --se="$(TARGET_DEBUG)"

redebug: clean debug

#Dependancy support!
-include $(OBJS:.o=.d)

#Compile into debug mode without stripping (-s)!
$(BUILD_DEBUG): ${OBJS}
	$(info Creating debug executable $@...)
	@$(MKDIR) -p $(dir $@)
	@${CC} -ggdb -o "$@" $(OBJS) -Wl,-gc-sections ${LDFLAGS}

$(BUILD_PROFILE): ${OBJS}
	$(info Creating profiling executable $@...)
	@$(MKDIR) -p $(dir $@)
	@${CC} -g -pg -o "$@" $(OBJS) -Wl,-gc-sections ${LDFLAGS}

#Compile into release mode with stripping (-s)!
$(BUILD_RELEASE): ${OBJS}
	$(info Creating release executable $@...)
	@$(MKDIR) -p $(dir $@)
	@${CC} -o "$@" ${OBJS} $(STRIP) ${LDFLAGS}

#Patch for dependancy output using incorrect .o file paths is right below the CC lines!
$(BUILD_DIR)/linux/%.o:%.c
	$(info Compiling $<)
	@$(MKDIR) -p $(dir $@)
	@${CC} $(OPTIMIZATIONFLAGS) ${CFLAGS} $(BUILD_CFLAGS) ${INCLUDE_DIRS} -c $< -o $@
	@${CC} $(CFLAGS) $(INCLUDE_DIRS) -c $< -MM -MF $(patsubst %.o,%.d,$@)
	@sed -i 's|$(notdir $@):|$@:|' $(patsubst %.o,%.d,$@)

clean:
	$(info Cleaning up...)
	@-$(RM) $(OBJS)
	@-$(RM) $(BUILD_RELEASE)
	@-$(RM) $(BUILD_PROFILE)
	@-$(RM) $(BUILD_DEBUG)
	@-$(RM) $(patsubst %.o,%.d,$(OBJS))

install: $(BUILD_RELEASE)
	install -m 0755 $(BUILD_RELEASE) $(prefix)/bin

# Special flags that aren't targets, just targets used for creating compiler&linker flags!
.PHONY: SDL2 SDL2static install
